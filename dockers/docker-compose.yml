version: '3.8'

services:
  redis:
    image: redis:6.2-alpine
    hostname: redis
    container_name: redis
    restart: always
    ports:
      - '${REDIS_MAPPING_PORT}:6379'
    networks:
      - ticketmaster-network
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - 'redis_vol:/data'

  postgres:
    image: docker.io/bitnami/postgresql:16
    hostname: postgres
    container_name: postgres
    restart: always
    ports:
      - '${PG_MAPPING_PORT}:5432'
    volumes:
      - 'postgres_vol:/bitnami/postgresql'
    env_file:
      - ./.env.master.postgres
    depends_on:
      - redis
    networks:
      - ticketmaster-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.3
    container_name: elasticsearch
    hostname: elasticsearch
    volumes:
      - ./elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
    ports:
      - ${ES_9200_MAPPING_PORT}:9200
      - ${ES_9300_MAPPING_PORT}:9300
    networks:
      - ticketmaster-network
    env_file:
      - ./.env
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      discovery.type: single-node
    restart: unless-stopped

  webserver:
    build:
      context: ../
      dockerfile: Dockerfile
    hostname: webserver
    container_name: webserver
    depends_on:
      - redis
      - postgres
      - elasticsearch
    networks:
      - ticketmaster-network
    volumes:
      - '../logs:/code/logs'
    env_file:
      - ../.env
    restart: always


  # filebeat:
  #   image: docker.elastic.co/beats/filebeat:8.7.0
  #   container_name: filebeat
  #   network_mode: "host"
  #   command:
  #     - -e
  #     - --strict.perms=false
  #   env_file:
  #     - ../.env
  #   volumes:
  #     - ${FILEBEAT_LOG_FOLDER}:/opt/logs
  #     - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
  #   environment:
  #     FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD}

  nginx:
    image: docker.io/bitnami/nginx:1.25
    hostname: nginx
    container_name: dev-dms-nginx
    ports:
      - '${NGINX_MAPPING_PORT}:8080'
    depends_on:
      - webserver
    networks:
      - ticketmaster-network
    volumes:
      - ./nginx/nginx.conf:/opt/bitnami/nginx/conf/nginx.conf:ro
      - ./nginx/server_blocks:/opt/bitnami/nginx/conf/server_blocks
      - nginx_vol:/opt/bitnami/nginx/logs
    restart: always

networks:
  ticketmaster-network:
    driver: bridge

volumes:
  postgres_vol:
    driver: local
    name: postgres_vol
    driver_opts:
      type: none
      device: .data/postgres_vol
      o: bind

  elasticsearch_vol:
    driver: local
    name: elasticsearch_vol
    driver_opts:
      type: none
      device: .data/elasticsearch_vol
      o: bind

  redis_vol:
    driver: local
    name: redis_vol
    driver_opts:
      type: none
      device: .data/redis_vol
      o: bind

  nginx_vol:
    driver: local
    name: nginx_vol
    driver_opts:
      type: none
      device: .data/nginx_vol
      o: bind

  pgbackups_vol:
    driver: local
    name: pgbackups_vol
    driver_opts:
      type: none
      device: .data/pgbackups_vol
      o: bind
