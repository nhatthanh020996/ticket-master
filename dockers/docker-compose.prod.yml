version: '3.8'

services:
  redis:
    image: redis:6.2-alpine
    hostname: redis
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - dms-network
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - 'redis_vol:/data'

  postgres_primary:
    image: docker.io/bitnami/postgresql:16
    hostname: posgres_primary
    container_name: postgres-primary
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - 'postgres_primary_vol:/bitnami/postgresql'
    env_file:
      - ./.env.master.postgres
    depends_on:
      - redis
    networks:
      - dms-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.3
    container_name: elasticsearch
    hostname: elasticsearch
    volumes:
      - ./elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch_vol:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - dms-network
    env_file:
      - ./.env
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      discovery.type: single-node
    restart: unless-stopped

  pgbackups:
    image: prodrigestivill/postgres-backup-local
    container_name: pgbackups
    restart: always
    user: postgres:postgres
    networks:
      - dms-network
    volumes:
      - pgbackups_vol:/backups
    depends_on:
      - postgres_primary
    environment:
      - POSTGRES_HOST=postgres_primary
      - POSTGRES_DB=dms
      - POSTGRES_USER=postgres
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=1
      - BACKUP_KEEP_WEEKS=1
      - BACKUP_KEEP_MONTHS=1
      - HEALTHCHECK_PORT=8082

  webserver:
    build:
      context: ../
      dockerfile: Dockerfile
    hostname: webserver
    container_name: webserver
    ports:
      - "7060:7060"
    depends_on:
      - redis
      - postgres_primary
      - elasticsearch
    networks:
      - dms-network
    volumes:
      - '../logs:/code/logs'
    env_file:
      - ../.env
    restart: always


  filebeat:
    image: docker.elastic.co/beats/filebeat:8.7.0
    container_name: filebeat
    network_mode: "host"
    command:
      - -e
      - --strict.perms=false
    env_file:
      - ../.env
    volumes:
      - ${FILEBEAT_LOG_FOLDER}:/opt/logs
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
    environment:
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD}

  nginx:
    image: docker.io/bitnami/nginx:1.25
    hostname: nginx
    container_name: nginx
    ports:
      - '8080:8080'
    depends_on:
      - webserver
    networks:
      - dms-network
    volumes:
      - ./nginx/nginx.conf:/opt/bitnami/nginx/conf/nginx.conf:ro
      - ./nginx/server_blocks:/opt/bitnami/nginx/conf/server_blocks
      - nginx_vol:/opt/bitnami/nginx/logs
    restart: always

networks:
  dms-network:
    driver: bridge

volumes:
  postgres_primary_vol:
    driver: local
    name: postgres_primary_vol
    driver_opts:
      type: none
      device: /usr/docker/postgres_primary_vol
      o: bind

  elasticsearch_vol:
    driver: local
    name: elasticsearch_vol
    driver_opts:
      type: none
      device: /usr/docker/elasticsearch_vol
      o: bind

  mongodb_vol:
    driver: local
    name: mongodb_vol
    driver_opts:
      type: none
      device: /usr/docker/mongodb_vol
      o: bind

  redis_vol:
    driver: local
    name: redis_vol
    driver_opts:
      type: none
      device: /usr/docker/redis_vol
      o: bind

  nginx_vol:
    driver: local
    name: nginx_vol
    driver_opts:
      type: none
      device: /user/docker/nginx_vol
      o: bind

  pgbackups_vol:
    driver: local
    name: pgbackups_vol
    driver_opts:
      type: none
      device: /user/docker/pgbackups_vol
      o: bind
